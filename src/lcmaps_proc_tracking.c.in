
/*
 * lcmaps-process-tracking
 * By Brian Bockelman, 2011 
 * This code is under the public domain
 */

/*****************************************************************************
                            Include header files
******************************************************************************/

#include "config.h"

#include <stdio.h>
#include <errno.h>
#include <fcntl.h>
#include <limits.h>
#include <signal.h>
#include <string.h>
#include <sys/stat.h>
#include <sys/wait.h>
#include <sys/prctl.h>
#include <dlfcn.h>

#include "lcmaps/lcmaps_modules.h"
#include "lcmaps/lcmaps_cred_data.h"
#include "lcmaps/lcmaps_arguments.h"

#include "proc_police.h"
#include "proc_keeper.h"

// Various necessary strings
#define PLUGIN_PROCESS_TRACKING_PATH "-path"
static char * logstr = "lcmaps-process-tracking";
static char * execname = "@datadir_resolved@/lcmaps-plugins-process-tracking/process-tracking";
#define MAX_INT_STR 64

// Check to see if the pool accounting is loaded and has setup an account for
// us to use.  If so, the lcmaps_pool_accounts_fd will be set to the value of
// an open file descriptor.
// The daemonized process will need to keep the FD open to maintain the lock.
// This prevents others from using the same account.
// Returns 0 on success, -1 on failure.
// 
// If the FD is found, it sets lockfile to a string containing the lockfile,
// and sets the fd accordingly.
// If the FD is not found, but the call has been successful, it changes fd
// to -1.
//
// If no FD has been found, it does not change the value of lockfile.
//
// On success, if fd is set, the callee owns the lockfile memory and should 
// 'free' it.
//
static int get_account(int *fd, char ** lockfile)
{
  int count = 0;
  // Pull this data from the credential object.
  char ** account_info_list = getCredentialData(POOL_INDEX, &count);
  if (!account_info_list || !count) {
    lcmaps_log(5, "%s: Missing pool account information; will not use pool accounts.\n", logstr);
    *fd = -1;
    return 0;
  }
  char * account_info = account_info_list[0];
  int lockfile_fd;
  char * account_lockfile;

  // Parse the POOL_INDEX information.
  if (sscanf(account_info, "%d:", &lockfile_fd) != 1) {
    lcmaps_log(1, "%s: Incorrectly formatted account information (%s)!\n", logstr, account_info);
    return -1;
  }

  char * offset = strchr(account_info, ':');
  if (offset == NULL) {
    lcmaps_log(1, "%s: Incorrectly formatted account information (%s); missing ':' separator!\n", logstr, account_info);
    return -1;
  }
  account_lockfile = offset+1;

  // Everything is OK - return
  *lockfile = strdup(account_lockfile);
  if (*lockfile == NULL) {
    lcmaps_log(0, "%s: Failed to allocate memory for lockfile name.\n", logstr);
    return -1;
  }
  *fd = lockfile_fd;
  return 0;
}

// Daemonize the process
static int do_daemonize() {

    //  Setting the real and effective uid/gid to root.
    if (setreuid(0, 0) != 0) {
      lcmaps_log_debug(0, "%s: Setting the real/effective uid to root failed: %d %s.\n", logstr, errno, strerror(errno));
      return -errno;
    }
  
    if (setregid(0, 0) != 0) {
      lcmaps_log_debug(0, "%s: Setting the real/effective gid to root failed: %d %s.\n", logstr, errno, strerror(errno));
      return -errno;
    }

    int pid = fork();
    if (pid < 0) {
        lcmaps_log(0, "%s: Fork failure: %d %s", logstr, errno, strerror(errno));
        return -errno;
    }
    if (pid > 0) {
        _exit(0);
    }
    umask(0);
    int sid = setsid();
    if (sid < 0) {
        lcmaps_log(0, "%s: Setsid failure: %d %s", logstr, errno, strerror(errno));
        return -errno;
    }
    if ((chdir("/")) < 0) {
        lcmaps_log(0, "%s: Chdir failure: %d %s", logstr, errno, strerror(errno));
        return -errno; 
    }
    // Note that fd 0/1 are used to talk to the parent; keep them open.
    close(2);
    open("/dev/null", O_RDONLY);
    
    return 0;
}

#define PR_SET_NAME_MAX 16
static int proc_police_main(pid_t pid, pid_t parent_pid, const char *uid, const char *dn, const char *vo, const char *fqan) {
    int result = 0;

    lcmaps_log(0, "%s: Launching %s.\n", logstr, execname);

    char pid_char[64], ppid_char[64];
    if (snprintf(pid_char, 64, "%d", pid) >= 64) {
        lcmaps_log(0, "%s: Invalid PID: %d.\n", logstr, pid);
        return 1;
    }
    if (snprintf(ppid_char, 64, "%d", parent_pid) >= 64) {
        lcmaps_log(0, "%s: Invalid parent PID: %d.\n", logstr, parent_pid);
        return 1;
    }

    char * lockfile = NULL;
    int fd;
    if (get_account(&fd, &lockfile) == -1) {
        lcmaps_log(0, "%s: Failed to lookup lockfile information.\n", logstr);
        return 1;
    } else {
        lcmaps_log(5, "%s: Got account information from pool-accounts module.\n", logstr);
    }
    if ((fd != -1) && lockfile) {
      if (dup2(fd, 2) == -1) {
        lcmaps_log(0, "%s: Failed to move lockfile %s FD to stderr: (errno=%d, %s)\n", logstr, lockfile, errno, strerror(errno));
        return 1;
      }
      lcmaps_log(4, "%s: Launching process-tracking with lockfile %s.\n", logstr, lockfile);
      execl(execname, "process-tracking", pid_char, ppid_char, uid, dn, vo, fqan, lockfile, NULL);
    } else {
      lcmaps_log(4, "%s: Launching process-tracking without lockfile.\n", logstr);
      execl(execname, "process-tracking", pid_char, ppid_char, uid, dn, vo, fqan, NULL);
    }

    if (lockfile) {
        free(lockfile);
    }

    return result;
}

static void handle_child(int p2c[], int c2p[], pid_t pid, pid_t ppid, const char *uid, const char *dn, const char *vo, const char *fqan)
{
    // Close all file handles.
    //  Child Process
    close(p2c[1]);
    close(c2p[0]);
    if (dup2(p2c[0], 0) == -1) {
      lcmaps_log(0, "%s: Failed to dup file descriptor (%d: %s)\n", logstr, errno, strerror(errno));
      exit(errno);
    }
    if (dup2(c2p[1], 1) == -1) {
      lcmaps_log(0, "%s: Failed to dup file descriptor (%d: %s)\n", logstr, errno, strerror(errno));
      exit(errno);
    }
    close(p2c[0]);
    close(p2c[1]);
    close(c2p[1]);

    //  Setting the real and effective uid/gid to root.
    if (setreuid(0, 0) != 0) {
      lcmaps_log_debug(0, "%s: Setting the real/effective uid to root failed.\n", logstr);
      exit(errno);
    }

    if (setregid(0, 0) != 0) {
      lcmaps_log_debug(0, "%s: Setting the real/effective gid to root failed.\n", logstr);
      exit(errno);
    }
    if (do_daemonize()) {
      lcmaps_log_debug(0, "%s: Failed to daemonize!\n", logstr);
      exit(1);
    }
    
    int result = proc_police_main(pid, ppid, uid, dn, vo, fqan);
    exit(result);
}

/******************************************************************************
Function:   plugin_initialize
Description:
    Initialize plugin; a no-op, but required by LCMAPS
Parameters:
    argc, argv
    argv[0]: the name of the plugin
Returns:
    LCMAPS_MOD_SUCCESS : success
******************************************************************************/
int plugin_initialize(int argc, char **argv)
{

  int idx;
  // Notice that we start at 1, as argv[0] is the plugin name.
  for (idx=1; idx<argc; idx++) {
    lcmaps_log_debug(2, "%s: arg %d is %s\n", logstr, idx, argv[idx]);
    if ((strncasecmp(argv[idx], PLUGIN_PROCESS_TRACKING_PATH, strlen(PLUGIN_PROCESS_TRACKING_PATH)) == 0) && ((idx+1) < argc)) {
      if ((argv[idx+1] != NULL) && (strlen(argv[idx+1]) > 0)) {
        execname = strdup(argv[++idx]);
        lcmaps_log_debug(2, "%s: %s has %s\n", logstr, PLUGIN_PROCESS_TRACKING_PATH, execname);
      }
    } else {
      lcmaps_log(0, "%s: Invalid plugin option: %s\n", logstr, argv[idx]);
      return LCMAPS_MOD_FAIL;
    }
  }

  return LCMAPS_MOD_SUCCESS;

}


/******************************************************************************
Function:   plugin_introspect
Description:
    return list of required arguments
Parameters:

Returns:
    LCMAPS_MOD_SUCCESS : success
******************************************************************************/
int plugin_introspect(int *argc, lcmaps_argument_t **argv)
{
  static lcmaps_argument_t argList[] = {
    { "user_dn"        , "char *"                ,  1, NULL},
    { "voms_data_list" ,  "lcmaps_vomsdata_t *"  ,  0, NULL},
    { "nvoms_data"     ,  "int"                  ,  0, NULL},
    {NULL        ,  NULL    , -1, NULL}
  };

  *argv = argList;
  *argc = lcmaps_cntArgs(argList);

  return LCMAPS_MOD_SUCCESS;
}




/******************************************************************************
Function:   plugin_run
Description:
    Launch a process tracking daemon for LCMAPS.
    Basic boilerplate for a LCMAPS plugin.
Parameters:
    argc: number of arguments
    argv: list of arguments
Returns:
    LCMAPS_MOD_SUCCESS: authorization succeeded
    LCMAPS_MOD_FAIL   : authorization failed
******************************************************************************/
int plugin_run(int argc, lcmaps_argument_t *argv)
{
  FILE *fh = NULL;
  int p2c[2], c2p[2];
  int rc = 0, ok = 0;
  pid_t pid, my_pid, ppid;
  int snp_ret;
  char *dn, **dn_string2;
  lcmaps_vomsdata_t *vomsdata, **vomsdata2;
  char *vo = "", *fqan = "";

  // Pull information from LCMAPS about the target user.  Used for Gratia integration.
  int uid_count = 0;
  char uid_str[MAX_INT_STR];
  int *uid_array = (int *)getCredentialData(UID, &uid_count);
  if (uid_count != 1) {
    lcmaps_log(0, "%s: No UID set yet; must map to a UID before running the glexec_tracking module.\n", logstr);
    goto process_tracking_parse_failure;
  }
  if (((snp_ret = snprintf(uid_str, MAX_INT_STR, "%d", uid_array[0])) < 0) || (snp_ret >= MAX_INT_STR)) {
    lcmaps_log(0, "%s: Unable to write out the UID.\n", logstr);
    goto process_tracking_parse_failure;
  }
  dn_string2 = (char **)lcmaps_getArgValue("user_dn", "char *",argc, argv);
  if ((dn_string2 == NULL) || ((dn = *dn_string2) == NULL)) {
    lcmaps_log_debug(1, "%s: value of user_dn is empty.\n", logstr);
    goto process_tracking_parse_failure;
  }   
  vomsdata = NULL;
  vomsdata2 = (lcmaps_vomsdata_t **)lcmaps_getArgValue("voms_data_list", "lcmaps_vomsdata_t *", argc, argv);
  if ((vomsdata2 == NULL) || ((vomsdata = *vomsdata2) == NULL) || (vomsdata->nvoms == 0)) {
    lcmaps_log_debug(5, "%s: No VOMS data to pass to process-tracking.\n", logstr);
  } else {
    vo = vomsdata->voms[0].voname;
    if (vomsdata->voms[0].nfqan) {
      fqan = vomsdata->voms[0].fqan_unix[0].fqan;
    }
  }

  if (pipe(p2c) == -1) {
    lcmaps_log(0, "%s: Pipe creation failure (%d: %s)\n", logstr, errno, strerror(errno));
    goto process_tracking_pipe_failure;
  }
  if (pipe(c2p) == -1) {
    lcmaps_log(0, "%s: Pipe creation failure (%d: %s)\n", logstr, errno, strerror(errno));
    goto process_tracking_pipe_failure;
  }

  my_pid = getpid();
  ppid   = getppid();

  pid = fork();
  if (pid == -1) {
    lcmaps_log(0, "%s: Fork failure (%d: %s)\n", logstr, errno, strerror(errno));
    goto process_tracking_fork_failure;
  } else if (pid == 0) {
    handle_child(p2c, c2p, my_pid, ppid, uid_str, dn, vo, fqan);
  }
  close(p2c[0]);
  close(p2c[1]);
  close(c2p[1]);

  //  After dumping the string to stdout, we need to expect an answer
  //  back on stdin.
  fh = fdopen(c2p[0], "r");
  if (fh == NULL) {
    rc = 1;
  } else {
    rc = fscanf(fh, "%d", &ok);
    fclose(fh);
  }

  // Child has exited, let's call waitpid and do status parsing.
  int status, exit_code, result;
  while (((result = waitpid(pid, &status, 0)) == -1) && (errno == EINTR)) {
  }
  if (result == -1) {
    lcmaps_log (0, "%s: Error: unable to get status of glexec monitor child. %d %s.\n", logstr, errno, strerror(errno));
    goto process_tracking_child_failure;
  }
  if (!WIFEXITED(status)) {
    lcmaps_log (0, "%s: Error: glexec monitor child died with a non-exit status, %d.\n", logstr, status);
    goto process_tracking_child_failure;
  }
  if ((exit_code = WEXITSTATUS(status))) {
    lcmaps_log (0, "%s: Error: glexec monitor child with exit code %d.\n", logstr, exit_code);
    goto process_tracking_child_failure;
  }

  if (rc < 0) {
    lcmaps_log (0, "%s: Error: failure reading from the monitor process. %d.\n", logstr, rc);
    goto process_tracking_child_failure;
  }
  if (ok != 0) {
    lcmaps_log (0, "%s: Error: failure in configuring monitor process. %d.\n", logstr, ok);
    goto process_tracking_child_failure;
  }

  lcmaps_log(0, "%s: monitor process successfully launched\n", logstr);

  return LCMAPS_MOD_SUCCESS;


process_tracking_fork_failure:
  close(p2c[0]);
  close(p2c[1]);
  close(c2p[0]);
  close(c2p[1]);
process_tracking_pipe_failure:
process_tracking_child_failure:
process_tracking_parse_failure:
  lcmaps_log_time(0, "%s: monitor process launch failed\n", logstr);

  return LCMAPS_MOD_FAIL;
}

int plugin_verify(int argc, lcmaps_argument_t * argv)
{
    return plugin_run(argc, argv);
}

/******************************************************************************
Function:   plugin_terminate
Description:
    Terminate plugin.  Boilerplate - doesn't do anything
Parameters:

Returns:
    LCMAPS_MOD_SUCCESS : success
******************************************************************************/
int plugin_terminate()
{
  return LCMAPS_MOD_SUCCESS;
}
